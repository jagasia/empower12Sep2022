Today's projects:
	D:\Jag\Empower\all\java\rest

---------------------------------------------------------------
@Controller
	in a controller class, every method returns a view or ModelAndView

	we can change the behavior by using @ResponseBody annotation


JSON
	JavaScript Object Notation



@RestController	=	@Controller + @ResponseBody


[{"id":12,"name":"Jag"},{"id":12,"name":"Jag"},{"id":12,"name":"Jag"}]

http methods:
	GET	
	POST
	PUT
	DELETE
	PATCH



https://api.instantwebtools.net/v1/airlines/2

https://jsonplaceholder.typicode.com/todos/1

---------------------------------------------------
Demo:
entity:
	Food
		id
		name
		price


1) go to start.spring.io
	java
	maven
	war
	version 8
	group id:		com.empower.swiggy
	artifact id:		06-oct-rest-1
	package:		same as group id

	dependencies:
			spring web
			spring data jpa
			oracle driver

2)  download and unzip to the workspace location

3) import
	existing maven projects

4) entity:
	Food
		id
		name
		price
package com.empower.swiggy.model;

public class Food {
	private Integer id;
	private String name;
	private Double price;
	public Food() {}
	public Food(Integer id, String name, Double price) {
		super();
		this.id = id;
		this.name = name;
		this.price = price;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Double getPrice() {
		return price;
	}
	public void setPrice(Double price) {
		this.price = price;
	}
	@Override
	public String toString() {
		return "Food [id=" + id + ", name=" + name + ", price=" + price + "]";
	}
	
}

5) in application.properties
	spring.datasource.url=jdbc:oracle:thin:@localhost:1522:xe
spring.datasource.username=sys as sysdba
spring.datasource.password=password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.show_sql=true


6)	repository interface 
package com.empower.swiggy.model;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface FoodRepository extends JpaRepository<Food, Integer>
{

}

7)	service 
package com.empower.swiggy.model;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class FoodService {
	@Autowired
	private FoodRepository fr;
	
	public Food create(Food food) {
		return fr.save(food);
	}
	public List<Food> read() {
		return fr.findAll();
	}
	public Food read(Integer id) {
		Optional<Food> temp = fr.findById(id);
		Food food=null;
		if(temp.isPresent())
			food=temp.get();
		return food;
	}
	public Food update(Food food) {
		Optional<Food> temp = fr.findById(food.getId());
		Food f=null;
		if(temp.isPresent())
		{
			fr.save(food);
			f=food;			
		}
		return f;
	}
	public Food delete(Integer id) {
		Optional<Food> temp = fr.findById(id);
		Food food=null;
		if(temp.isPresent())
		{
			food=temp.get();
			fr.delete(food);
		}
		return food;
	}
	
}

8)	controller		(rest controller)
package com.empower.swiggy.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.empower.swiggy.model.Food;
import com.empower.swiggy.model.FoodService;

@RestController
@RequestMapping("/food")
public class FoodController {
	@Autowired
	private FoodService fs;
	
	@GetMapping
	public List<Food> retrieveAllFoods() {
		return fs.read();
	}
	
	@GetMapping("/{id}")
	public Food findFoodById(@PathVariable("id")Integer id) {
		return fs.read(id);
	}
	
	@PostMapping
	public Food addFood(@RequestBody Food food) {
		return fs.create(food);
	}
	
	@PutMapping
	public Food updateFood(@RequestBody Food food) {
		return fs.update(food);
	}
	
	@DeleteMapping("/{id}")
	public Food deleteFood(@PathVariable("id")Integer id) {
		return fs.delete(id);
	}
	
}



download this project:
	https://github.com/jagasia/06-oct-rest-1


-------------------------------------------------------------------------
Swagger
	
steps:
1) pom.xml
	<dependency>
	    <groupId>io.springfox</groupId>
	    <artifactId>springfox-boot-starter</artifactId>
	    <version>3.0.0</version>
	</dependency>


2) enable swagger
	go to Application.java
@SpringBootApplication
@EnableSwagger2
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}

}

3) configure swagger in application.properties:
in application.properties:
	spring.mvc.pathmatch.matching-strategy=ant-path-matcher

4) go to browser:
	localhost:8081/swagger-ui/			
		remember /food is not given here.
		also	/ at the end


----------------------------------------------------
lets modify Food class
	private Integer id;
	private String name;
	private Double price;
	private String category;



Business requirement:
	We should be able to find food by category
