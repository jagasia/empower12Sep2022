Process
	is a running instance of a Program


	
Single Threaded process
Multi Threaded process

Process can contain one or more threads
Main thread
	

Thread
	is a sequence / flow of execution


display1();		
display2();			//synchronous

using threads, we can do asynchronous programming

Parallel
Concurrent

Processor
	allocating resources to each process

resource 
	time
	memory
advantages:
1) effective utilization of resources
2) parallelism or concurrency
3) asynchronous programming

drawbacks:
1) race condition
2) dead lock
3) lock starvation


When will a thread die?
	1) work is over
	2) when process is dead,	all the threads inside the process are also dead
	3) when you assign null

--------------------------
How can we create Thread?

Thread t1=new Thread();

run()		define the work of the thread

	public void displayEven()
	{
	}

	public void run()
	{
		displayEven();
	}


class MyThread extends Thread
{
	public void run()
	{
	}
}

MyThread mt=new MyThread();
mt.start();				//start will call the run method

2 ways we can create Thread.
1) extends Thread
2) implements Runnable		(functional interface)	it has only run() method


Demo1:	using (extends Thread)

t1	displays 	Odd numbers from 1 to 19
t2 	displays	Even numbers from 2 to 20


TasK:
--------
Create 2 subclasses of Thread and override the run method
first thread to display odd numbers
second thread to display even numbers

extends Thread
------------------------

TasK:	(hangman game)

The program should display a question (GK). 
The user should answer the question within 25 seconds. If not, the program should display "Failed" message and terminate.
If user answers before 25 seconds, then "Congratulations" message should be displayed.

------------------------------------------------------

extends Thread
implements Runnable


class MThread implements Runnable
{
	public void run()
	{
	}
}

Thread t1=new Thread(new MThread());
Thread t2=new Thread(()->{
	//code here
});



Create a thread using Runnable interface
------------------------------------------------------

Thread Synchronization
-----------------------------------
	some portion of the code, you do not want multiple threads to execute simultaneously.
	we can declare a block of code as synchronized block
	or
	we can declare the method itself as synchronized method

to ensure that
	no two threads are allowed to execute that code at a time.
	they are allowed one by one

sleep()

join()	
	informs the running threads to proceed and complete, while, other threads do not start untill running thread complete.

wait()	how is wait different from sleep?
	sleep has time limit to sleep. After time limit, the thread continues
	wait do not have a time limit. until notify() or notifyAll() is called, the thread will be waiting only

notify
		t1.notify()			t1, if it is waiting, will continue now

notifyAll()
		all threads that are waiting, will now, continue

monitor
	

yield()
	whoever is the owner of the monitor, pls give up the monitor to the next thread

start()
stop()

------------
synchronized block
synchronized method

Overriding rules:
@Override
1) overriding method (sub class method) must have same signature and return type.	covariant type
2) overriding method cannot reduce the visibility
3) overriding method cannot be declared with throws class with new exception

--------------------------------------------------JDBC------------------------------------

Hostname: localhost
Port:	1521
SID:	XE (you can note down service name)
username:	hr
password:	hr


.jar		java archive



1) Create a java project
2) copy the ojdbc8.jar file to the project folder
3) right click project
	-> Properties
		-> Java Build path 	-> 3rd tab ie., Libraries
			-> Add external jar
				browse and select the jar file (in your project folder)
					Apply and Close



Driver driver=new oracle.jdbc.driver.OracleDriver();
	this is loading a driver



JDBC API
	is layer between Java program & Database



Statement
PreparedStatement
CallableStatement

execute			execute any SQL statement. But will not give result.
executeQuery		select queries, and it returns result set
executeUpdate		DML statement, it returns int	(no of rows affected)


normally ResultSet is read-only, forward-only
	but we can modify a resultset into scrollable, updatable result sets.
next



------------------Statements-------------
Statement
PreparedStatement
CallableStatement


Statement
	for simple queries

PreparedStatement
	for parameterized queries
		SELECT * FROM Employees WHERE EMPLOYEE_ID=?


CallableStatement
	for calling stored procedures and functions

------------------------------	using Statement------------------------------
		Driver driver = new oracle.jdbc.driver.OracleDriver();
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","hr","hr");
		Statement st = con.createStatement();
		ResultSet rs = st.executeQuery("SELECT * FROM Employees");
		while(rs.next())
		{
			System.out.println(rs.getInt(1)+"\t"+rs.getString(2));
		}


----------------------------- using PreparedStatement---------------------------
		Driver driver = new oracle.jdbc.driver.OracleDriver();
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","hr","hr");
		PreparedStatement st=con.prepareStatement("SELECT * FROM Employees WHERE employee_id=?");
		st.setInt(1,100);
		ResultSet rs=st.executeQuery();
		if(rs.next())
		{
			System.out.println(rs.getInt(1)+"\t"+rs.getString(2));
		}
	





CREATE TABLE USER_MASTER
(
USERNAME VARCHAR2(30) PRIMARY KEY,
PASSWORD VARCHAR2(30) NOT NULL,
FIRST_NAME VARCHAR2(30),
LAST_NAME VARCHAR2(30)
);


username
	i dont know' or 1=1 --
password
	i dont care

"SELECT * FROM USER_MASTER WHERE username='"+username+"' and password='"+password+"'"
SELECT * FROM USER_MASTER WHERE username='i dont know' or 1=1 --' and password='i dont care'