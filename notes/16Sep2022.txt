Strings
----------
String in java, is a class.

String str="hello";

String str4="hello";

String str2=new String("hello");

String str3=str2;	

Stack	primitives are stored in stack
Heap	(objects are stored in heap)


if you create any variable inside a method (function)

public static void main(String []jags)
{
	String str="hello";				//hello is an object present in heap. Its reference is stored in stack (str)
	new String("hello");
	Scanner sc=new Scanner(System.in);		//
	Scanner sc;				// a variable is created in stack;
	sc.next();


	sc=new Scanner(System.in);

	String input=new Scanner(System.in).next();


}



	a==b
== compares the values, if the operands are value types
== compares the references, if the operands are reference types



String is immutable



str1="hello";		//str1 refers to a memory location 		
str1="world";		//str1 refers to a difference location

StringBuilder	
StringBuffer		is synchronized

x=arr.length;


char c=sc.next().charAt(0);
	is same as
String input=sc.next();
char c=input.charAt(0);

String
	properties
		
	method
		length();		returns the length of the string
		charAt(index);
		substring
		


TasK
	Identify as many properties and methods of a String class

	toCharArray()			return a char [] 
	charAt(index)
	substring()
	split()		accepts a regex
	toLowerCase()
	toUpperCase()
	equals()
	equalsIgnoreCase()
	trim()
	isEmpty()
	valueOf()
	contains()
	indexOf()
	lastIndexOf()
	concat()
	

Task:
------
	Accept a String input from the user and display only the vowels present in the string
	ex:
		input:	education
		output:	euaio


import java.util.Scanner;

public class App2 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String input=sc.nextLine();
		//convert the string into char array and loop
//		char[] arr = input.toCharArray();
//		for(int i=0;i<arr.length;i++)
//		{
//			//display the character only if it is a vowel
//			switch(arr[i])
//			{
//			case 'a':
//			case 'e':
//			case 'i':
//			case 'o':
//			case 'u':
//				System.out.print(arr[i]);				
//			}
			
//		}
		
		for(int i=0;i<input.length();i++)
		{
			char c=input.charAt(i);
			switch(c)
			{
			case 'a':
			case 'e':
			case 'i':
			case 'o':
			case 'u':
				System.out.print(c);				
			}
		}
		
	}

}

-------------------------------------------------

Character at Index

Somu has an excellent visualization skill using which he answers any logical and arithmetic calculation by mind calculation. To test his skill, Ramu gave him the following question. Given a String, s, and an integer, i, find the character present at the given index, i, when the string is repeatedly concatenated.
Write a program to  help Somu.

Input Format:
First line of the input is the string, s. Assume max length of the string is 50.
Second line is an Integer that denotes the index value, i.

Output Format:
Output is a character present at ith index.

Note:
Print "Invalid" if the index is negative.

Sample Input 1:
Amphibian
25
Sample Output 1:
a

Sample Input 2:
Java
-1
Sample Output 2:
Invalid 


Explanation for Sample1:
input String is "Amphibian".
After repeated concatenation, the string becomes "AmphibianAmphibianAmphibianAmphibian......"
The character at 25 th index is 'a'. 
 

-----------Solution-----------
		Scanner sc=new Scanner(System.in);
		String input=sc.next();
		int index=sc.nextInt();
		if(index<0)
		{
			System.out.println("Invalid");
		}
		else
		{
			System.out.println(input.charAt(index%input.length()));
		}



============================
Square and Tower
In a city, there are N mobile signal towers. Raj is creating an application to visualize the coverage area of the signal towers.
        For simplicity, the following are assumed: 
1) the shape of the city is square. 
2) the signal coverage is in the form of a square. 
3) the side length of the signal coverage is 3 meters.
        Given side length of the city, number of towers, and coordinates of towers, find whether whole city is under coverage.  If the whole city is not under signal coverage, find how much area is not under coverage. 

Assume that the two of the end of points of the city are  (0,0) and (n-1,n-1). 
Input Format: 
First input corresponds to n, length of the city. 
Second input corresponds to the number of towers, t. 
The next n lines of the input follow the following format: x and y coordinates of each tower, respectively. 

Consider that tower is always placed at valid position. 

Output Format: 
Print "Yes" if the whole city is under coverage. Else, print "No", along with the left out area. 

Sample Input 1: 
5
3
2 2
0 1
4 1 

Sample output 1:
No
8 

Sample Input 2: 
3 
1 
1 1 
Sample Output 2: 
Yes 


Explanation for sample 1: 
4	 	T3	 	 	 
3	 	 	 	 	 
2	 	 	T1	 	 
1	 	 	 	 	 
0	 	T2	 	 	 
 	0	1	2	3	4
Green colour indicates the coverage area. 
Red colour indicates the area which is not under coverage. 
Total red area = 8. 
 


--------------------Solution-----------
import java.util.Scanner;

public class SquareAndTower {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int cityLength=sc.nextInt();
		int noOfTowers=sc.nextInt();
		int towers[][]=new int[noOfTowers][2];
		int city[][]=new int[cityLength][cityLength];
		
		for(int i=0;i<noOfTowers;i++)
		{
			towers[i][0]=sc.nextInt();
			towers[i][1]=sc.nextInt();
		}
		//for as many towers present, we need to update the towers and adjacent
		for(int i=0;i<noOfTowers;i++)
		{
			int x=towers[i][0];
			int y=towers[i][1];
			
			city[x][y]=1;
//			System.out.println("The adjacency of "+x+" and "+y);
			for(int m=-1;m<=1;m++)
			{
				for(int n=-1;n<=1;n++)
				{
					int x1=x+m;
					int y1=y+n;
					if(x1>=0 && x1<cityLength && y1>=0 && y1<cityLength)
					{
//						System.out.println("x1="+x1+" y1="+y1);
						city[x1][y1]=1;
					}
				}
			}
//			
		}
		
		System.out.println("-----------------");
		//showing the city
		for(int i=0;i<cityLength;i++)
		{
			for(int j=0;j<cityLength;j++)
			{
				System.out.print(city[i][j]+"\t");
			}
			System.out.println();
		}
	}

}



<<<<<<< HEAD
--------------------------------------Object Oriented Programming
What is a class?
	Class is a blue print for creating objects
	class define what the objects should have
		properties
		methods
	
What is an Object?
	Object is the instance of the class

What is a POJO class?
	Plain Old Java Objects

	A simple class that do not inherit a super class/ implement interface/ not an abstract class

public
private
default		friendly
protected

A class should not have public variables.
	non public  data members

how to declare constants in java?
	final int MARKS=100;
	

methods can be public
data members shall be non public

A class can have constructors
	if you dont write any constructor, then compiler will create one.	
	if you create any constructor with arguments, then create a constructor without argument also.


you have private/ non public data members,
	then provide public getter/ setter/ both




=======
>>>>>>> dfea665abb64dc3099102c5c0af92e3809f231dc
