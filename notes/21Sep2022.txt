Java IO
------------
txt
doc
pdf
iso
docx
xls
xml
css
csv

2 categories
----------------
text
binary


123
	numbers
	number
	text

	

in java,
	InputStream		binary input
	OutputStream		binary output
	Reader			character input
	Writer			character output



		File f=new File("D:\\Jag\\Empower\\all\\notes\\yash.txt");
		Scanner sc=new Scanner(f);
		String input=sc.nextLine();
		System.out.println(input);




File
-----
File f=new File("yash.txt");


FileInputStream
FileReader




		System.out.println("Enter your name:");
		String name="";
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		name=br.readLine();
		System.out.println(name);



Demo:
--------
FileInputStream
FileOutputStream

source:
C:\Users\rjaga\Pictures\briyani1.jfif

destination:
shashank.jfif



		File f1=new File("C:\\Users\\rjaga\\Pictures\\briyani1.jfif");
		FileInputStream fis=new FileInputStream(f1);
		int len=(int) f1.length();
		System.out.println("There are "+len+" bytes in that file");
		byte []data=new byte[len];
		fis.read(data);
		fis.close();
		
		//write all the bytes into a new file
		FileOutputStream fos=new FileOutputStream("shashak.jfif");
		fos.write(data);
		fos.flush();
		fos.close();
		System.out.println("check");



-------------------
Task:
Identify the purpose of
	DataInputStream
		read primitive data
	ObjectInputStream
		read objects of class that implements Serializable


	
Demo:
	Create an Employee object and write into a file
	Create another program that reads an object and display the values.


Serialization
	is the process of converting an object into series of bytes so that it can written into a stream

Serializable 
	is a marker interface	(that do not have any abstract methods inside)


Marker interface		0 abstract methods	(ex:	Serializable)
Functional interface		1 abstract method	(ex:	Runnable, Comparable, Comparator, Predicate)


Task:
create a class that implements Serializable
write an object into the file using ObjectOutputStream
read that object from the file using ObjectInputStream

---------------------------------------------------------

1) Create a java program that allows the users to 
	1) add Employee details
	2) Update Employee details
	3) Remove an Employee
	4) Display All employees details
	5) Find an employee by Id
	6) Find an employee by Name	(multiple employees may be displayed)
	7) Exit

This will be infinite loop until user choose 7 or above

Note:
	The employee details will be stored permanently so that it is available next time/day also
Steps:
	1) create an Employee class (implements Serializable)
	2) App.java
		create an ArrayList or HashSet of employees
		


1
10
Dinesh Srinivasan
12345678
ECE
1
20
Rajesh
929292
EEE
1
30
Prakash
122222
ECE
1
40
Ganesh
888888
EEE
6



-----------
Find age by dateOfBirth

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.util.Date;
import java.util.Scanner;

public class App_Age {

	public static void main(String[] args) throws ParseException {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the date of Birth: (dd-MMM-yyyy)");
		String input=sc.nextLine();
		Date dob=new Date();
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MMM-yyyy");
		dob=sdf.parse(input);
//		System.out.println(dob);
		
		//how to find the age?
		LocalDate ld1=new java.sql.Date(dob.getTime()).toLocalDate();
		
		LocalDate today=LocalDate.now();
		
		Period result = Period.between(ld1, today);
		System.out.println("You are "+result.getYears()+" years, "+result.getMonths()+" months, "+result.getDays()+" days old!");
	}

}


-----------------------
Access specifiers
Comparable, Comparator


Comparable, Comparator
-------------------------------------
TreeSet will not allow adding elements if it does not implement Comparable or Comparator.



Employee a=new ...
Employee b=new ....

a.compareTo(b);


in java 8,
we can use lambda for functional interface implementation


