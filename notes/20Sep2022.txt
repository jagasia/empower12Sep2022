Abstract class
Interface
Final
	final class
	final data member
	final method



abstract class does not allow us to create object.
we can create sub class for an abstract class.
abstract class can contain methods that, sub classes can override.



1: Rectange
2: Triangle
3: Circle
4: Exit





Task:
create a class called Furniture
	name
	color
	methods:		acceptDetails		input for name and color
			displayDetails		display name and color

class Chair
	name, color, number of legs
class BookShelf
	name, color, number of shelves


public class Furniture {
	private String name;
	private String color;
	
	public void acceptDetails()
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the name:");
		name=sc.nextLine();
		System.out.println("Enter the color:");
		color=sc.nextLine();
	}
	
	public void displayDetails()
	{
		System.out.println("Name:"+name);
		System.out.println("Color:"+color);
	}
}



-----------------------------
Interfaces
	provides the highest level of abstraction	
		till java 1.7, interfaces never had methods with body.
		all methods declared inside interface where empty	(abstract. we dont mention abstract)

	java 1.8 onwards,
	interfaces can have
		static & default methods with body


What is the difference between Intefaces & Abstract class



in c++


class A
{
public:
	void add(){}
};

class B
{
public:
	void subtract(){}
};

class C : A, B
{};


C c;
c.add();
c.subtract();

---------------------------------Now, in java.....

interface A
{
	void add();
}

interfacer B
{
	void subtract();
}

class C implements A, B
{
	
}

--------------------------------------------------
interface A
{
	public void display();
}

class X implements A
{
	public void display()
	{
		////
	}	
}

class Y implements A
{
	public void display()
	{
		////
	}	
}

A obj=new X();			obj.display();		get the output as per X
obj=new Y();			obj.display();		get the output as per Y


--------------------
final
	final int SCORE=100;			//SCORE is a constant here

	final void display()
	{}				this method cannot be overridden

	final class A	
	{
	}
					final class cannot be inherited

----------------------------------------------------------
Collections
--------------------
Set interface

HashSet
TreeSet			SortedSet
LinkedHashSet


	-------------------------------------------

Map
	key - value pair

	2 dimensional data structure

every element in map is called as "entry"




Task:
	accept a string input from the user.
	and display the count of each alphabet present in the string.

ex:	
	input:
		Java is an object oriented language.

J	1
a	5
v	1
 	5
i	2



Map
	keySet()			returns all the keys as a Set
	values()			returns all the values as a Collection
Set has a iterator


-------------------
Task:
--------

Employee
	id
	name
	salary
	department		(String		ex:		ECE	EEE)

App.java
	Enter the number of Employees:		n
	accept n strings and split each into employee object
	store those employee objects in the List<Employee>

	create a map		Map<String, Integer>		
		and store the department wise, sum of salary

test:
10,Ram,100000,ECE
5,Siva,100000,EEE
15,Raja,100000,ECE
20,Abdul,100000,Civil
25, Dinesh,100000,Civil