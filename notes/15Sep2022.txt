Fundas, Controll Statements, Arrays, Strings
-------------------------------------------------------
Backend programming
Object Oriented Programming language

Java Language
------------------
	Compiler based language
	what a typical compiler do?
		Source code	-> translated -> 	Machine code

Java compilation 		has 2 stages of compilation:
	Java compiler:
		converts the java language code into BYTE CODE.
	at runtime:	Java Runtime Environment
			JRE has another compiler, that converts the BYTE CODE into Machine Language code

Language features
----------------------
	Data Types
		8 data types
			byte		1 byte		8 bit	
			short		2 bytes		16 bit
			int		4 bytes		32 bit
			long		8 bytes		4

			float
			double

			char		'\0'		'\n'		'\t'	'a'	'b'	'0'
	
			boolean

	constructs
		if, else, else if 
		switch case
		while, do - while, 
		for loop, for-each loop (enhanced for loop)
	
	arrays
	

------------------------------------------
Copy the sts zip file from n/w path to local D:\tools folder

UNZIP the zip file (Extract All)

in d:\training folder, create a "java" folder

in sts (extracted) folder,
	right click SpringToolSuite4.exe
		and send to desktop (create shortcut)
		you can also drag that shortcut to Task Bar (pin to task bar)

	this SpringToolSuite4.exe	(or its shortcut) can be run to get STS

When you run STS
	it will ask the 

	STS 4.15 only WORKS


Open STS
	choose the location where you want all your project folders to be created		(workspace)

	File -> New -> Java Project
		give a name for the project		(convention	all small letters, hyphen separated)




Class Name conventions:
------------------------------
	should start with a capital letter				Every word first letter is in capital		PascalCase
		ex:
			ArrayIndexOutOfBoundsException
	should be a noun
	class name and file name be same
	

How to get input from the user?
	Scanner



==	vs 	equals()

Task:
	accept a character input from the user.
	check if it is a vowel or not.
		display Vowel		or 	Not Vowel

------------------------------
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter no1:");
		int no1=sc.nextInt();
		System.out.println("Enter no2:");
		int no2=sc.nextInt();
		System.out.println("What do you want to do? Add/ Subtract");
		String op=sc.next();
		
		if(op.equalsIgnoreCase("Add"))
		{
			System.out.println(no1+no2);
		}
		else
		{
			System.out.println(no1-no2);
		}

	
	char c=sc.next().charAt(0);			

=====================
import java.util.Scanner;

public class A4 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		char input=sc.next().toLowerCase().charAt(0);
		
		if(input=='a' || input=='e' || input=='i' || input=='o' ||input=='u')
		{
			System.out.println("Vowel");
		}else
		{
			System.out.println("Not Vowel");
		}
	}

}



Try the same task using "switch-case" construct

break
	exits from wherever we use "break"
	can be used inside a 
		loop	(or)
		switch

	

Task:
	Accept 3 numbers as input
	Display the largest number as output


---------------------------------------
Loops
	while
	do while
	for 
	enhanced for




++i
i++





public class App6 {
	public static void main(String[] args) {
		int i=0;
//		i++;		//post increment
//		++i;		//pre increment
		while(++i<10)
		{
			System.out.println(i);
		}
	}
}




------------------Do While------------------


public class App7 {

	public static void main(String[] args) {
		int i=0;
		do
		{
			System.out.println(i++);
		}while(i<10);
	}

}



--------------------For loop---------

public class App8 {

	public static void main(String[] args) {
		System.out.println("Printing 0 - 9");
		for(int i=0;i<10;i++)
		{
			System.out.println(i);
		}
	}

}







---------------------------------------Arrays----------------
What is Array?

	same data type		
	collection of elements
	index used to identify elements directly
	elements are present in contigeous memory locations


import java.util.Arrays;

public class App1 {

	public static void main(String[] args) {
		int arr[]= {55,100,48,97,85,20,18,33};
		System.out.println(Arrays.toString(arr));
	}

}



--------------------
import java.util.Arrays;

public class App1 {

	public static void main(String[] args) {
		int arr[]= {55,100,48,97,85,20,18,33};
//		System.out.println(Arrays.toString(arr));
		for(int i=0;i<arr.length;i++)
		{
			System.out.println(arr[i]);
		}
	}

}

---------------------

import java.util.Arrays;

public class App1 {

	public static void main(String[] args) {
		int arr[]= {55,100,48,97,85,20,18,33};
		for(int x:arr)
			System.out.println(x);
	}

}
----------------------
Arrays in java can be multi-dimensional also.


path for challenge:
	github.com/jagasia/empower12Sep2022/java





Dice Game I

Each player will be allowed to throw  a dice 2 times. The points for each player will be calculated as follows :
If the values thrown are different, the points scored is equal to the sum of the 2 values.
If the values thrown are the same, the points scored is equal to double the sum of the 2 values.

Write a program to calculate the points scored by a player.

Input and Output Format:

Input consists of 2 integers. The valid range of inputs is from 0 to 6. [ Both 0 and 6 inclusive]
Output the points scored. In case of invalid inputs, print “Invalid Input”.

Refer sample input and output for formatting specificaions.

[All text in bold corresponds to input and the rest corresponds to output.]
Sample Input and Output 1:

Enter Value 1:
5
Enter Value 2:
6
The points scored is 11

Sample Input and Output 2:

Enter Value 1:
5
Enter Value 2:
5
The points scored is  20

Sample Input and Output 3:

Enter Value 1:
8
Enter Value 2:
6
Invalid Input 


Solution:
-----------
import java.util.Scanner;

public class DiceGame1 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int no1, no2;
		System.out.println("Enter Value 1:");
		no1=sc.nextInt();
		System.out.println("Enter Value 2:");
		no2=sc.nextInt();		
		//check if those 2 inputs are valid or not!
		if(no1<0 || no1>6 || no2<0 || no2>6)
		{
			System.out.println("Invalid Input");
			System.exit(0); 		//program terminates
		}		
		int result=no1+no2;
		
		if(no1==no2)
		{
			result*=2;
		}		
		System.out.println(result);
	}

}


===========================================
Array Product

Write a program to find the product of all 2 digit numbers in an array.

If the size of the input array is negative or if any of the input elements is negative , print “Invalid Input” and terminate the program.

Input and Output Format:

Input consists of n+1 integers. The first integer corresponds to n, the number of elements in the array. The next 'n' integers correspond to the elements in the array.
Output consists of an integer that corresponds to the product.

Refer sample output for formatting specifications.
Assume that the maximum number of elements in the array is 20.

Sample Input 1:
6
2
7
10
3
13
100

Sample Output 1:
130

Sample Input 2:
-4

Sample Output 2:
Invalid Input

Sample Input 3:
4
1
-2

Sample Output 3:
Invalid Input 

--------------Solution-------------
import java.util.Scanner;

public class ArrayInput {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();	
		if(n<0)
		{
			System.out.println("Invalid Input");
			System.exit(0);
		}
		int arr[]=new int[n];
		
		for(int i=0;i<n;i++)
		{
			arr[i]=sc.nextInt();
			if(arr[i]<0)
			{
				System.out.println("Invalid Input");
				System.exit(0);
			}
		}

		//solution
		int result=1;
		for(int x:arr)
		{
			//check if the x is a 2 digit number or not
			if(x>9 && x<100)
			{
				result*=x;
			}
		}
		
		System.out.println(result);
	}

}
---------------------------------------------Challenge 3--------------------
Bus Game 
 
In a village, N kids were playing the bus game.
The rules for the bus game is as follows:
Starting from the number 1,  the kids keep telling the consequtive numbers one by one.  A number 'X' will be given. The kid who gets a number which is divisible by X should say "Bus", instead of the original number , and the next kid will continue with the next number. This will go on in a circular manner. If any kid says incorrectly, that kid is out of the game.
The kids are very clever. So they won't make any mistake while telling the numbers. They make mistake only while telling "Bus".

Write a program to find the kid's number(index starting from 1) who went wrong.

Input Format: 
The first input is an integer, that corresponds to the number of kids, N.
The second input is an integer, that corresponds to the number X.
The following lines are strings, which correspond to the number said by the kids. The input stops only when any kid says incorrectly.
 
Output Format:
Output is an integer value which represents the kid's number who went wrong.

Sample Input:
5
4
1
2
3
Bus
5
6
7 
8 

Sample Output:
3 
 
----------------Solution------------
import java.util.Scanner;

public class BusGame {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int noOfKids=sc.nextInt();
		int x=sc.nextInt();
		int output=0;
		for(int i=1;true;i++)
		{
			String input=sc.next();
			if(i%x==0)
			{
				//expect Bus here
				if(!input.equals("Bus"))
				{
					output=i%noOfKids;
					break;
				}
			}
		}
		System.out.println(output);
	}

}

--------------------------------Percentage of Runs
Percentage of Runs
Sam is a cricket freak, who loves to collect statistics about the matches. Suppose, a batsman scored X runs which included Y fours and Z sixes, Sam wants to calculate the  percentage of the total score he made by running between the wickets.
Write a program to help Sam .
Input Format:
First input is an integer X that denotes the total runs scored.
Second input is an integer Y that denotes the  number of fours he has scored.
Third input is an integer Z that denotes the  number of sixes he has scored.
[Note: Assume all inputs are valid.] 
Output Format:
Output is a double value that denotes the percentage of runs he made by running between the wickets(rounded off to 2 decimal places).
Sample Input 1:
110
3
8
Sample Output 1:
45.45
Sample Input 2:
60
2
1
Sample Output 2:
76.66

Explanation for sample 1:
Total Runs = 110
No. of Fours = 3
No. of sixes = 8
Total runs scored by boundaries = 4*3 + 8*6 = 60
Therefore, runs scored by running between the wickets = 110 - 60 = 50
Percentage scored by running =(50/110)*100 =  45.45 



------------Solution--------------
import java.util.Scanner;

public class PercentageOfRuns {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int total=sc.nextInt();
		int fours=sc.nextInt();
		int sixers=sc.nextInt();
		int boundaries=0;
		boundaries+=fours*4;
		boundaries+=sixers*6;
		
		int runs=total-boundaries;
		float pct=(float)runs/total*100;
		System.out.printf("%.2f",pct);
		
	}

}
----------------------------------
Challenge 3:

Maximum Product
---------------------
Playing with arrays has become a hobby for Arun. This time Arun wants to find the greatest number in the array such that it is the product of any two numbers in the array.
Write a program to help Arun to the do the task. If no such number exists, then print -1.
[Note: The two number that are used to find the product can be the number itself.  For example, if the array elements are [1,2,3] , then 1*3 = 3 will be the solution for this array.]

Input Format :
First input is an integer value that denotes the size of the array.
Second input is a series of integers separated by space that denotes the array values.

Output Format :
Output is an  integer that denotes the maximum product.

Sample Input 1:
5
35 30 7 6 5
Sample Output 1:
35

Sample Input 2:
5
2 4 6 89 78
Sample Output 2:
-1


----------------------------------
import java.util.Arrays;
import java.util.Scanner;

public class MaximumProduct {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int size=sc.nextInt();
		int arr[]=new int[size];
		for(int i=0;i<size;i++)
		{
			arr[i]=sc.nextInt();
		}
		
		Arrays.sort(arr);
		int max=arr[size-1];
		boolean flag=false;
		for(int i=0;i<size;i++)
		{
			int result=0;
			if(arr[i]!=max)
			{
				result=max/arr[i];
				//check if this result is found in array
				for(int j=0;j<size;j++)
				{
					if(result==arr[j])
					{
						//found
						flag=true;
						break;
					}
				}
			}
		}
		if(flag)
		{
			System.out.println(max);
		}else
		{
			System.out.println(-1);
		}
	}

}
------------------------
Abundant Number

Amit was listening to the teacher's lecture and she was teaching on the topic divisors of a number. When she gave a homework to find the divisors of a number, he found that for some numbers, the sum of its divisors is greater than the number itself. Given a range from X to Y, write a program to print all the abundant numbers within it. An abundant number or excessive number is a number for which the sum of its proper divisors is greater than the number itself. If there are no abundant numbers within the given range then print "-1".

Note :
    Range X to Y denotes all numbers between X and Y, including X and excluding Y. The minimum value of X is 1 and the maximum value of Y is 500 and always X<Y. 

Input format: 
First input is an integer that denotes the X value.
Second input is an integer that denotes the Y value. 

Output format: 
Output is a series of integers separated by a comma. 

Sample Input 1: 
1
50 
Sample Output 1: 
12,18,20,24,30,36,40,42,48 

Sample Input 2: 
1
10 
Sample Output 2: 
-1 


-------------Solution
import java.util.Scanner;

public class AbundantNumber {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int from=sc.nextInt();
		int to=sc.nextInt();
		boolean isFirst=true;
		for(int i=from;i<=to;i++)
		{
			//check if "i" is abundant number or not
			int sumOfDivisors=0;
			int j;
			for(j=1;j<=i/2;j++)
			{
				if(i%j==0)
				{
					sumOfDivisors+=j;
				}
			}
			//check if the sumOfDivisors > i
			if(sumOfDivisors>i)
			{
//				System.out.print(i+",");
				if(!isFirst)
				{
					System.out.print(",");
				}
				System.out.print(i);
				isFirst=false;
			}
		}
	}

}
