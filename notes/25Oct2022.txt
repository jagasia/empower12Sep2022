install node js
	angular
	reactjs
install docker

Java 11 for sonarqube
--------------------------------
Steps for installing node js:

download node js from:
	https://nodejs.org/en/download/

install node js

and inform in chat window.

in case if you face any issues, unmute and inform me.

in cmd, check
	node -v
Also ensure that you have Visual Studio code.

once you check 
	node -v

start installing angular:
1) to install angular
	npm install -g @angular/cli

	to check
		ng -v version
2) to install typescript
	npm install -g typescript

	to check 
		tsc -v

All of you ensure that you have
	typescript
	angular cli
	visual studio code

----------------------------------------------------------------------------------------------------------------------------
ng version | ng v 

Create angular project using angular CLI

1) choose a folder/ directory where you want to create angular project

	ng new oct25-demo1 	--style=css 		--routing


2) once the project is created, go inside the folder
	cd oct25-demo1

3) code .
	will open vs code in that location

4) ng serve -o
	to run the project and open in new browser tab




<router-outlet></router-outlet>


steps for bootstrap:	(instead of CDN)

1) install bootstrap
	npm install bootstrap
2) import (in style.css)
	@import url(https://unpkg.com/bootstrap@4.1.0/dist/css/bootstrap.min.css)

-----------------------
create the home page:

<div class="jumbotron text-center">
  <h1>My First Bootstrap Page</h1>
  <p>Resize this responsive page to see the effect!</p> 
</div>
  
<div class="container">
  <div class="row">
    <div class="col-sm-4">
      <h3>Column 1</h3>
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit...</p>
      <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>
    </div>
    <div class="col-sm-4">
      <h3>Column 2</h3>
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit...</p>
      <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>
    </div>
    <div class="col-sm-4">
      <h3>Column 3</h3>        
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit...</p>
      <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>
    </div>
  </div>
</div>



---------------------------------------------------------
create components:
	ng generate component login



in vs code, running scripts is by default, disabled.

	Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser


create component and plug it in app component



1) template driven components		[(ngModel)]	2-way data binding
2) reactive forms components		we represent the form as an object

in order to use reactive forms module,
	import 

go to app.module.ts
	imports
		FormsModule		*ngIf		*ngFor
		ReactiveFormsModule		reactive forms	FormBuilder



import {  FormsModule, ReactiveFormsModule } from '@angular/forms';

  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    ReactiveFormsModule
  ],

  loginForm:any;

  constructor(private fb:FormBuilder) {
    this.loginForm=this.fb.group({
      username:[],
      password:[]
    });
   }





<form [formGroup]="loginForm" class="container text-left">
    User Name: <input type="text" name="" id="" formControlName="username" class="form-control">
    Password: <input type="password" name="" id="" formControlName="password" class="form-control"><br>
    <input type="button" value="Login" class="btn btn-success">&nbsp;
    <input type="reset" value="Reset" class="btn btn-warning">
</form>

{{ loginForm.value | json }}

--------------------------------------------------------------------------------------
How to connect with backend?
Lets create a rest api in spring boot

and connect that with angular front end

Spring security using JWT
-----------------
JWT
	JSON web token
		{"token":" irfwjsiojs[fogijw[0gg9jwef09ewjfg09er-8ghmg89idgmhd8 gmhds9i gmo"}


What is the need for JWT?
	after login, after login is successful, the user is provided with a token.
	the user uses that token in subsequent request they make to the rest api

	in rest api, every conversation is independent.
	there is no state management.

	every method call is independent. 
	Stateless

when login is successful, you obtain a token
	and the server will be able to verify the token

	token is expired? or valid


how to implement JWT?
1)	dependency to be added in pom.xml
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.9.1</version>
		</dependency>


2) JWT utility class
	methods to create token, validate token, token expiry policy, etc	

package com.wipro.hrms.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@Service
public class JwtUtil {

    private String secret = "javatechie";

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }
    private Claims extractAllClaims(String token) {
        return Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();
    }

    private Boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    public String generateToken(String username) {
        Map<String, Object> claims = new HashMap<>();
        return createToken(claims, username);
    }

    private String createToken(Map<String, Object> claims, String subject) {

        return Jwts.builder().setClaims(claims).setSubject(subject).setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10))
                .signWith(SignatureAlgorithm.HS256, secret).compact();
    }

    public Boolean validateToken(String token, UserDetails userDetails) {
        final String username = extractUsername(token);
        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }
}



3) Jwt filter
	intercept all the requests coming to our server

	check if there is a header "Authorization"


package com.wipro.hrms.filter;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.wipro.hrms.service.UserService;
import com.wipro.hrms.util.JwtUtil;

@Component
public class JwtFilter extends OncePerRequestFilter {

    @Autowired
    private JwtUtil jwtUtil;
    @Autowired
    private UserService service;


    @Override
    protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException {

        String authorizationHeader = httpServletRequest.getHeader("Authorization");

        String token = null;
        String userName = null;

        if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
            token = authorizationHeader.substring(7);
            userName = jwtUtil.extractUsername(token);
        }

        if (userName != null && SecurityContextHolder.getContext().getAuthentication() == null) {

            UserDetails userDetails = service.loadUserByUsername(userName);

            if (jwtUtil.validateToken(token, userDetails)) {

                UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken =
                        new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                usernamePasswordAuthenticationToken
                        .setDetails(new WebAuthenticationDetailsSource().buildDetails(httpServletRequest));
                SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
            }
        }
        filterChain.doFilter(httpServletRequest, httpServletResponse);
    }
}



4) for database
	spring data jpa dependency to be added to pom.xml

	application.properties	(configure the datasource)
		url
		username
		password
		dialect

Entity class?
	User class
	USER_MASTER table

	username
	password
	firstName
	lastName
	email

repository
service
rest controller
1) create a spring boot app
	spring web
	spring security
	spring data jpa
	oracle driver

	we will add jjwt dependency to pom.xml

2) configuration class
package com.empower.ecom.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.empower.ecom.service.MyUserDetailsService;

@Configuration
public class MyConfiguration extends WebSecurityConfigurerAdapter
{
	@Autowired
	private MyUserDetailsService userDetailsService;

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userDetailsService);
	}
	
	@Bean
	public PasswordEncoder passwordEncoder()
	{
		return NoOpPasswordEncoder.getInstance();
	}
	
}


3) MyUserDetailsService 

package com.empower.ecom.service;

import java.util.ArrayList;

import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

@Service
public class MyUserDetailsService implements UserDetailsService
{

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		return new User("raja", "raja", new ArrayList<>());
	}

}




in configuration, we are going to introduce exception to certain URLs
	for example
		validateLogin method can have url as /login
		this /login should be allowed unconditionally		.permitAll
		other urls must be authenticated			.authenticated



{
    "jwt": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYWphIiwiZXhwIjoxNjY2NzE5MTMyLCJpYXQiOjE2NjY2ODMxMzJ9.UfTVILIRAT6BXLTXwa-HWkSvqs2ZyxC4QU9tvWjXgZ8"
}



in angular, we need to access rest api:

1) app.module.ts
	import HttpClientModule




eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqYWciLCJleHAiOjE2NjY3MjAxMjgsImlhdCI6MTY2NjY4NDEyOH0.2Atjby9BLpAyGheIURAXNHYvSS_p7SIbquaSZqls6fE

in angular service, send the authorization header in each call:

addRestaurant(restaurant, jwt) {
    const httpOptions = {
        headers: new HttpHeaders({
            'Content-Type':  'application/json',
             Authorization: 'Bearer ' + jwt;
        })
    };
    return this.httpClient.post('http://localhost:1337/restaurants', restaurant, httpOptions);
  }



Before lunch break,

we created a spring boot rest api with spring security and jwt	
	/login
	/signup
		are the urls we permitAll
		and other urls are authenticated

from angular frontend, we were able to call
		/login
	and .cors	.enabled
	cross origin *

upon login validation, we got jwt token
and it is stored in localStorage

from frontend, we should signup




spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl




1. ngOnChanges –
This event is called every time whenever there is a change in the value of control of the input. The change in the value of a property that is bound fires this event. A data map containing the changes, i.e. the previous and the current value of the property within a SimpleChange.

Properties
The components having an input can use the method.
Whenever there is a change in the value of the input, the method gets invoked.
2. ngOnInit
After the initialization of the component or the display of the properties of the bound data, the event of ngOnInit is initialized. The event is called once only after the event of ngOnChanges.  Therefore, the event is mainly responsible for initializing the components data.

Properties
The data in a component is initialized by this event.
The method is called when the values of the input are set.
Angular CLI has by default added this hook to all its components.
The method can be called only once.
3. ngDoCheck 
After the check on the input properties of the angular components, the triggering of the ngDoCheck event occurs. It is mainly done to detect or act upon any changes that angular fails to detect. Based on the developer’s logic, the check can be implemented. Therefore, implementation of any custom change logic or algorithms for detection of change in any components is allowed by the event.

Properties
For any detection of changes angular runs this method.
The method is called for detecting changes.
4. ngAfterContentInit –
After the projection of the external content within the view of the component, the event ngAfterContentInit is called. For checking all the component bindings for the first time, this method gets executed for the first time. Its execution follows as soon as the execution of the method ngDoCheck(). The child component is usually linked with this method.

Properties 
Initially, the method is called after ngDoCheck.
Work is done by the content initialization.
5. ngAfterContentChecked –
The projection of the external content into the component is followed by checking the projected content. The method is called every time the check in the content is made through the mechanism of change detection of angular. It is executed after the execution of the method ngAfterContentInit(). Also, the method is executed after the subsequent execution of ngDoCheck(). It is usually linked with the initialization of the child components.

Properties 
To get started, the method waits for the completion of ngContentInit.
Execution is done after ngDocheck.
6. ngAfterViewInit
With the initialization of the angular components and the child components, the method of ngAfterViewInit is called. After the execution of the ngAfterContentChecked method, ngAfterViewInit method is called for the first time. The method is applicable only to the components of angular.

Properties
Only once the call for the method is generated after the view of the component is initialized.
7. ngAfterViewChecked –
Just after the ngAfterViewInit method, the ngAfterViewChecked method is called. Whenever the change detection method of angular does its checks over the components, the method of ngAfterViewChecked gets executed. The method is also executed after the execution of the ngAfterContentChecked(). Also, when the binding of the directives of the child component is changed, the method gets executed. 

Properties
The call is generated after the initialization and checking.
Work of the method is started after the completion of every method of ngDocheck.
8. ngOnDestroy
The method is called just before the destruction of the components by angular. To avoid scenarios of memory leaks, the method is able to detach event handlers, and also useful in unsubscribing observables. Only for once, the method is called to remove the component from the DOM.

Properties
The call is generated just before the removal of components from DOM.
Interfaces in Angular Lifecycle
The class of the components can be used for defining the angular lifecycle hooks methods. However, with the help of the interfaces, the methods can be called upon. The names of the interfaces are similar to that of the method names, omitting the prefix “ng”. This is because of the presence of a typescript interface with each of the methods of the lifecycle hooks. For example, the interface of ngOnInit is called OnInit. Only one event of the lifecycle hook is defined through a single interface. Further, the compiler doesn’t throw any compilation error when the interfaces are not implemented.


https://www.upgrad.com/blog/life-cycle-of-angular-components/



