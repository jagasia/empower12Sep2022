class Car
{
	Sony sony;		//Sony is a class means, Tightly coupled
}


class Car
{
	Audio audio;	//audio is an interface means, Loosely coupled
}

interface Audio
{
	void play();
}

class Sony implements Audio
{
	public void play()
	{
		System.out.println("Sony plays good sound");
	}
}


---------------------------------------------------------------
Now you are going to create spring boot MVC project
1) go to start.spring.io website
	group id:		com.empower.hrms
	artificat id:		04-oct-mvc-1
	package:		same as group id

	maven
	java
	version 8
	.war

	dependencies:
		spring web

2) unzip the downloaded zip

3) in sts/eclipse
	File	->	Import	->	Existing Maven project

		choose the location that contains pom.xml	(pom.xml will not visible. but src / .mvn will be visible)
	Finish

4) create the following folder
	WEB-INF/views

	under src/main/webapp		(this is found above target folder)
5) create a new jsp file index.jsp here (under views folder)

6) open application.properties file 			(this is found under src/main/resources)

7) write the below code in application.properties
	spring.mvc.view.prefix=/WEB-INF/views/
	spring.mvc.view.suffix=.jsp
	server.port=8083

8) create the controller class 	(under src/main/java)	
	right click base package and create a class
		sub package name can be "controller"

	@Controller
	public class MyController
	{
		@RequestMapping("/")
		public String home()
		{
			return "index";
		}
	}


9) run the project
	right click project, run as Spring boot app	/ 	java application

	or
	
	open the Application.java 	(main method)		ctrl + F11


10) go to browser and type:
	http://localhost:8084


Error:
	"Path with "WEB-INF" or "META-INF": [WEB-INF/views/index.jsp]"

Solution:
	in pom.xml, add this inside <dependencies> tag:

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>





	@RequestMapping("/")
	@RequestMapping(value = "/",method = RequestMethod.GET)
	@GetMapping("/")



all the above mappings are same only


ModelMap
	


Model
	entity
		@Entity
			ORM	object relational mapping

JPA 
	Java Persistence Api

@Entity
	use this annotation on a class that marks the class as entity class
	@Entity		the table name also will be Employee
	class Employee
		

if you want a different name for the table?

@Table(name="EMP")

@Entity
@Table(name="EMP")
public class Employee
{
	@Id
	private Integer associateNo;
	private String name;
	private String email;
}

----------------------------------------------JpaRepository----------------
javax.persistence package
-----------------------------------

entity:
	Product.java		
repo:
	ProductRepository.java		(interface)
service:
	ProductService.java			class that autowires the repository
controller:
	ProductController.java			autowire the service


product.jsp


whenever you want to use JpaRepository, you need to add 
	spring data jpa dependency



1) Entity:

package com.empower.ecom.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Product {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	private String name;
	private Double price;
	
	public Product() {}

	public Product(Integer id, String name, Double price) {
		super();
		this.id = id;
		this.name = name;
		this.price = price;
	}
	
	public Product(String name, Double price) {
		super();
		this.name = name;
		this.price = price;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Double getPrice() {
		return price;
	}

	public void setPrice(Double price) {
		this.price = price;
	}

	@Override
	public String toString() {
		return "Product [id=" + id + ", name=" + name + ", price=" + price + "]";
	}
	
}



2) Repository
package com.empower.ecom.model;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ProductRepository extends JpaRepository<Product, Integer>
{

}


3) Service class
package com.empower.ecom.model;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ProductService {
	@Autowired
	private ProductRepository pr;
	
	public Product create(Product product) {
		return pr.save(product);
	}
	public List<Product> read() {
		return pr.findAll();
	}
	public Product read(Integer id) {
		Optional<Product> temp = pr.findById(id);
		Product product=null;
		if(temp.isPresent())
		{
			product=temp.get();
		}
		return product;
	}
	public Product update(Product product) {
		Optional<Product> temp = pr.findById(product.getId());		
		if(temp.isPresent())
		{
			pr.save(product);
		}else
			product=null;
		return product;
	}
	public Product delete(Integer id) {
		Optional<Product> temp = pr.findById(id);
		Product product=null;
		if(temp.isPresent())
		{
			product=temp.get();
			pr.delete(product);
		}
		return product;
	}
	
}


------------------------------------Spring forms
just like JSTL core, spring forms is also a custom tag library for spring f/w

java.lang.IllegalStateException: Neither BindingResult nor plain target object for bean name 'product' available as request attribute



Product entity class is getting modified
	Date mfgDate;
	byte[] picture;

