Angular forms and validations
Custom Validators
	user defined validator
	a function is used to validate


import { Component, OnInit } from '@angular/core';
import {  AbstractControl, FormBuilder, Validators} from '@angular/forms'
import { CustomerService } from '../customer.service';

@Component({
  selector: 'app-customer',
  templateUrl: './customer.component.html',
  styleUrls: ['./customer.component.css']
})
export class CustomerComponent implements OnInit {
  customerForm:any;
  customers:any;

  constructor(private fb:FormBuilder, private cs:CustomerService) { 
    this.customerForm=this.fb.group({
      id:[],
      name:[],
      phone:['',[Validators.required,this.phoneLength]],
      email:[]
    });
  }

  get controls()
  {
    return this.customerForm.controls;
  }

  phoneLength(control: AbstractControl):{[key: string]: any} | null
  {
    if(control.value && control.value.length!=10)
      return {'phoneLength':true};
    else
      return {'phoneLength':false};
  }

  ngOnInit(): void {
    //call the getAllCustomers method of cs
    this.cs.getAllCustomers().subscribe((data)=>{
      this.customers=data;
      console.log(data);
    });
  }

  fnAddCustomer()
  {
    console.log(this.customerForm.value);
    this.cs.addCustomer(this.customerForm.value).subscribe((data)=>console.log(data));    
  }

  fnUpdateCustomer()
  {
    this.cs.updateCustomer(this.customerForm.value).subscribe((data)=>console.log(data));    
  }

  fnDeleteCustomer()
  {
    var id=this.customerForm.controls.id.value;
    console.log(id);
    this.cs.deleteCustomer(id).subscribe((data)=>console.log(data));
    

  }

}





{{ customerForm.controls.phone.errors }}

<form [formGroup]="customerForm">
    Id: <input type="number" name="" id="" formControlName="id" class="form-control">
    Name: <input type="text" name="" id="" formControlName="name" class="form-control">
    Phone: 
    <div [ngClass]="{'has-error':controls.phone.errors}">
        <input type="text" name="" id="" formControlName="phone" class="form-control">
        <span class="alert-danger" *ngIf="controls.phone.errors.phoneLength">
            Phone number must be exactly 10 digits only
        </span>
        <span class="alert-danger" *ngIf="controls.phone.errors.required && controls.phone.touched">
            Phone number is mandatory
        </span>
    </div>
    Email: <input type="email" name="" id="" formControlName="email" class="form-control">
    <br>
    <input type="button" value="Add" class="btn btn-success" (click)="fnAddCustomer()">&nbsp;
    <input type="button" value="Update" class="btn btn-warning" (click)="fnUpdateCustomer()">&nbsp;
    <input type="button" value="Delete" class="btn btn-danger" (click)="fnDeleteCustomer()">&nbsp;
</form>
<br>
<table class="table table-bordered table-striped table-hover">
    <thead>
        <tr>
            <th>Id</th><th>Name</th><th>Phone</th><th>Email</th>
        </tr>
    </thead>
    <tbody>
        <tr *ngFor="let c of customers">
            <td>{{c.id}}</td>
            <td>{{c.name}}</td>
            <td>{{c.phone}}</td>
            <td>{{c.email}}</td>
        </tr>
    </tbody>
</table>




Routing
-----------
we define routes
	/		HomeComponent
	customer		CustomerComponent
	signup		SignupComponent


http://localhost:4200/signup

where will the component be displayed?????
	<router-outlet></router-outlet>




------------------------------------------------

We already have rest api for customer
	http://localhost:8081/customer


Spring boot mvc project

we need to transform that REST api into a autowired controller

interface

Feign client

1) add open feign dependency
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>

2) in application class/ in any configuration class
	enable feign clients
		@EnableFeignClients

3) 	create an interface that contains only the declaration of rest controller methods


public interface CustomerApi {

	List<Customer> retrieveAllCustomers();

	Customer findCustomerById(Integer id);

	Customer addCustomer(Customer customer);

	Customer updateCustomer(Customer customer);

	Customer removeCustomer(Integer id);

}




MVC project steps:
1) pom.xml
	apache tomcat

2) create the folders for JSP file

3) application.properties
	prefix
	suffix
	port
4) Controller










