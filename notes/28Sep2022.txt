Singleton class
	Runtime r=new Runtime();		//not possible
	Runtime r=Runtime.getRuntime();	//is possible


Challenge:
	create a class Sun that has a private constructor but we can obtain an object of Sun using getInstance method.

	getInstance method can be public static method


scope of bean:
	Singleton
	Prototype



------------------------------------------------------------
java project?	yes
dynamic we project?	yes
web services?	yes


IOC container provides the instance of the beans

IOC
------
	Inversion Of Control

example for IOC is DI
what is DI
	Dependency Injection

class Customer
{
	private Integer id;
	private String name;
	private Address address;	//is a dependency for Customer
	//constructors
	//setters & getters
}

class Address
{
}

Address add=new Address();
add.setDoor........

Customer raja=new Customer();
raja.setId(100);
raja.setName("Raja");
raja.setAddress(add);		//setter based dependency injection


Customer siva=new Customer(100,"Siva",add);		//constructor based dependency injection


public class Car
{
//	private Sony sony;		//music player
//	private JBL jbl;
	private Audio audio;		//interface

	
}


-----------------------------------

https://github.com/jagasia/jun03-spring-jars-demo


inside "bin" folder, there is a "jars" folder


Lets create our first spring core project
------------------------------------------------------
1) Create a java project
	28-sep-spring-1
2) add spring jars to the build path
	right click project
		properties
			build path -> Libraries tab
				add external jar
					choose the jar files (ideally have them in your project folder)
3) Lets create a Bean
	Employee.java			package:	com.empower.hrms.model
		id
		name
		emailId

	constructors
	getters & setters
	toString

4) Spring configuration can be done in		xml file is directly created inside "src" folder (not inside any package)
	xml
	annotations

	so we use xml configuration in this project

	right click src and create a new xml file


<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<bean id="employee" class="com.empower.hrms.model.Employee" scope="prototype">
		<property name="id" value="100" />
		<property name="name" value="Dheeraj" />
		<property name="email" value="dheeraja@india.com" />
	</bean>

</beans>



package com.empower.hrms;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.empower.hrms.model.Employee;

public class App {

	public static void main(String[] args) {
		ApplicationContext ctx=new ClassPathXmlApplicationContext("bean.xml");
		Employee x = (Employee) ctx.getBean("employee");
		x.setName("Dheeraj Kumar");
		System.out.println(x);
		
		Employee y=(Employee) ctx.getBean("employee");
		System.out.println(y);
	}

}



--------------------
TasK:

